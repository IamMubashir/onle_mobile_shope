#include<iostream>
#include<vector>
#include<string>
#include<map>
using namespace std;
class mobileshope {
    string item;
    int price, quantity;
    float rating;
    vector<mobileshope> ve;
    bool isAdminLoggedIn;
    bool isUserLoggedIn;
    map<string, string> userPasswords; // Store username-password pairs

public:
    mobileshope() {
        isAdminLoggedIn = false;
        isUserLoggedIn = false;
    }

    // Login as admin
    void adminLogin() {
        string username, password;
        cout << "Enter admin username: ";
        cin >> username;
        cout << "Enter admin password: ";
        cin >> password;
        // Your authentication logic here, for simplicity, I'm using a hardcoded username and password
        if (username == "admin" && password == "admin123") {
            isAdminLoggedIn = true;
            cout << "Admin login successful!" << endl;
        } else {
            cout << "Invalid username or password!" << endl;
        }
    }
// Logout as admin
    void adminLogout() {
        isAdminLoggedIn = false;
        cout << "Admin logged out successfully!" << endl;
    }

    // Login as user
    void userLogin() {
        string username, password;
        cout << "Enter user username: ";
        cin >> username;

        // Check if the user is already registered
        if (userPasswords.find(username) != userPasswords.end()) {
            cout << "Enter user password: ";
            cin >> password;
            if (password == userPasswords[username]) {
                isUserLoggedIn = true;
                cout << "User login successful!" << endl;
            } else {
                cout << "Invalid password!" << endl;
            }
        } else {
            cout << "User not registered. Please set your password." << endl;
            cout << "Set your password: ";
            cin >> password;
            userPasswords[username] = password;
            isUserLoggedIn = true;
            cout << "User registered and logged in successfully!" << endl;
        }
    }

    // Logout as user
    void userLogout() {
        isUserLoggedIn = false;
        cout << "User logged out successfully!" << endl;
    }
// Adding new mobile
    void add() {
        if (!isAdminLoggedIn) {
            cout << "You need to login as admin to perform this operation!" << endl;
            return;
        }

        mobileshope Mobile;
        int choice = 1; // Initialize choice
        while (choice != 0 && choice == 1) {
            cout << "Enter the Name of Mobile Brand: ";
            cin >> Mobile.item;
            cout << "Enter the Price of the Mobile: ";
            cin >> Mobile.price;
            cout << "Enter the Quantity of the Mobile: ";
            cin >> Mobile.quantity;
            Mobile.rating = 0; // Initialize rating
            ve.push_back(Mobile);
            cout << "----------------------------------"<<endl;
            cout << " Mobile is added Successfully...! " << endl;
            cout << "----------------------------------"<<endl;
            cout << "Enter 1 to add more or 0 to exit: ";
            cin >> choice;
        }
    }

    // Displayed the product
    void display() {
        for(int i = 0; i < ve.size(); i++) {
            cout << "Your Mobile is: " << ve[i].item << endl;
            cout << "Your Mobile price is: " << ve[i].price << endl;
            cout << "Quantity of the product: " << ve[i].quantity << endl;
            cout << "Rating of the product: " << ve[i].rating << endl << endl;
        }
    }
    // Deleting the product
    void deleteitem() {
        if (!isAdminLoggedIn) {
            cout << "You need to login as admin to perform this operation!" << endl;
            return;
        }

        string n;
        cout << "Enter the name of the Item you want to delete: ";
        cin >> n;
        for (int i = 0; i < ve.size(); i++) {
            if (n == ve[i].item) {
                ve.erase(ve.begin() + i); // Correct index to erase
                cout << "---------------------------------"<<endl;
                cout << " Item is deleted Successfully..! "<< endl << endl;
                cout << "---------------------------------"<<endl;
            }
        }
    }
